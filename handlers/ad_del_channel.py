from loader import bot,dp,client
from aiogram import Bot, types
from aiogram.dispatcher import FSMContext
from telethon.tl.functions.channels import JoinChannelRequest
from telethon.tl.functions.messages import ImportChatInviteRequest
from telethon.tl.functions.channels import LeaveChannelRequest

#–ö–Ω–æ–ø–∫–∞ —Å —Ç–µ–∫—Å—Ç–æ–º "üìé–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª" 
@dp.message_handler(text_contains="üìé–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª",state="*")
async def send_(msg : types.Message, state: FSMContext):   
   await state.finish()
   await msg.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É/–∫–∞–Ω–∞–ª –≤ –∫–æ—Ç–æ—Ä—ã–π –±–æ—Ç –¥–æ–ª–∂–µ–Ω –∑–∞–π—Ç–∏")
   await state.set_state("msg_channel_join")

#–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —á—Ç–æ–±—ã –ø–æ–¥—Ö–æ–¥–∏–ª –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
@dp.message_handler(state="msg_channel_join")
async def wots(msg : types.Message, state: FSMContext):     
   if "https://t.me/" in msg.text:
      address_chanel = msg.text.split("/")[-1]
      print(address_chanel)
      result = await join_channel(address_chanel)
      if result:
         await msg.answer(f"–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è - <a href='{msg.text}'>–ö–∞–Ω–∞–ª</a>")
      else:
         await msg.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ - <a href='{msg.text}'>–ö–∞–Ω–∞–ª</a>")
      await state.finish()
   else:
      await msg.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä–µ–∫—Ç–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")

#–ö–Ω–æ–ø–∫–∞ —Å —Ç–µ–∫—Å—Ç–æ–º "üìé–í—ã–π—Ç–∏ —Å –∫–∞–Ω–∞–ª–∞" 
@dp.message_handler(text_contains="üìé–í—ã–π—Ç–∏ —Å –∫–∞–Ω–∞–ª–∞",state="*")
async def send_(msg : types.Message, state: FSMContext):   
   await state.finish()
   await msg.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É/–∫–∞–Ω–∞–ª —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –±–æ—Ç –¥–æ–ª–∂–µ–Ω –≤—ã–π—Ç–∏")
   await state.set_state("msg_channel_leave")

#–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —á—Ç–æ–±—ã –ø–æ–¥—Ö–æ–¥–∏–ª –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
@dp.message_handler(state="msg_channel_leave")
async def wots(msg : types.Message, state: FSMContext):     
   if "https://t.me/" in msg.text:
      address_chanel = msg.text.split("/")[-1]
      print(address_chanel)
      result = await leave_channel(address_chanel)
      if result:
         await msg.answer(f"–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –≤—ã—à–µ–ª —Å —á–∞—Ç–∞ - <a href='{msg.text}'>–ö–∞–Ω–∞–ª</a>")
      else:
         await msg.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ —Å —á–∞—Ç–∞ - <a href='{msg.text}'>–ö–∞–Ω–∞–ª</a>")
      await state.finish()
   else:
      await msg.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä–µ–∫—Ç–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")

#–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª—ã
async def join_channel(message_chanel):
   try:
      await client(JoinChannelRequest(message_chanel))
      return True
   except:
      try:
         await client(ImportChatInviteRequest(message_chanel))
         return True
      except Exception as E:
         print(E)
         return False
#–í—ã—Ö–æ–¥ —Å –∫–∞–Ω–∞–ª–æ–≤
async def leave_channel(message_chanel):
   try:
      await client(LeaveChannelRequest(message_chanel))
      return True
   except Exception as E:
      return False   